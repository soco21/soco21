@startuml

rectangle "flow control classes" {
    rectangle BlackJack [
        BlackJack
        |= Responsibilities |= Collaborators |
        | Print HumanPlayers balance | HumanPlayer |
        | Ask HumanPlayer if he wants to play | HumanPlayer |
        | Start Round | Round |
        | Check if HumanPlayer still has money | HumanPlayer |
    ]

    rectangle Round [
        Round
        |= Responsibilities |= Collaborators |
        | reset hand of HumanPlayer and dealer | HumanPlayer, Dealer|
        | force HumanPlayer to bet | HumanPlayer |
        | do HumanPlayers play | Play |
        | do dealers play | Play |
        | apply the result | |
    ]

    rectangle Play [
        Play
        |= Responsibilities |= Collaborators |
        | ask HumanPlayer/dealer if he wants to hit | HumanPlayer, Dealer |
        | check if busted | HumanPlayer, Dealer |
    ]

    BlackJack --> Round
    Round --> Play
}

rectangle "classes with state" {
    rectangle Dealer [
        Dealer
        |= Responsibilities |= Collaborators |
        | hold dealer hand | Hand |
        | print dealer hand | Hand |
        | decide if dealer needs to hit | Hand |
    ]

    rectangle HumanPlayer [
        HumanPlayer
        |= Responsibilities |= Collaborators |
        | hold HumanPlayer balance | |
        | print balance | |
        | ask HumanPlayer if he wants to play | |
        | get valid HumanPlayer bet | |
        | hold current bet | |
        | hold HumanPlayers hand | Hand |
        | print HumanPlayer hand | Hand |
        | get valid hit/stay | Hand |
    ]

    rectangle Pack [
        Pack
        |= Responsibilities |= Collaborators |
        | initialize the pack | Card |
        | hold the pack with which currently is played | |
        | provide a card | |
        | reinitialize the pack if there are less than 100 cards | Card |
    ]
}

rectangle "util classes" {

    rectangle Console [
        Console
        |= Responsibilities |= Collaborators |
        | Read from the stdin ||
        | Write to stdout ||
    ]
}

rectangle "data classes" {

    rectangle Hand [
        Hand
        |= Responsibilities |= Collaborators |
        | Hold the list of card for a player | Card |
        | calculate the score | Card |
        | print the cards to the console | |
    ]

    rectangle Card [
        Card
        |= Responsibilities |= Collaborators |
        | hold rank | Rank |
        | hold suit | Suit |
        | generate a Deck of all possible cards ||
    ]

    rectangle Rank [
        Rank
        |= Responsibilities |= Collaborators |
        | Hold the concept of Rank | |
    ]

    rectangle Suit [
        Suit
        |= Responsibilities |= Collaborators |
        | Hold the concept uf Suit | |
    ]

    Hand --> Card
    Card --> Rank
    Card --> Suit
}

BlackJack --> HumanPlayer

Round --> HumanPlayer
Round --> Dealer

Play --> Dealer : either Dealer or HumanPlayer
Play --> HumanPlayer : either Dealer or HumanPlayer
Play --> Pack

HumanPlayer --> Hand
Dealer --> Hand

Pack -> Card

HumanPlayer --> Console
Dealer --> Console

@enduml
